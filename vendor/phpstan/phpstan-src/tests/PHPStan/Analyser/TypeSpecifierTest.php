<?php

declare (strict_types=1);
namespace PHPStan\Analyser;

use PhpParser\Node\Arg;
use PhpParser\Node\Expr;
use PhpParser\Node\Expr\BinaryOp\Equal;
use PhpParser\Node\Expr\BinaryOp\Identical;
use PhpParser\Node\Expr\BinaryOp\NotIdentical;
use PhpParser\Node\Expr\BooleanNot;
use PhpParser\Node\Expr\FuncCall;
use PhpParser\Node\Expr\PropertyFetch;
use PhpParser\Node\Expr\Variable;
use PhpParser\Node\Identifier;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Scalar\String_;
use PhpParser\Node\VarLikeIdentifier;
use PHPStan\Type\ArrayType;
use PHPStan\Type\Constant\ConstantBooleanType;
use PHPStan\Type\MixedType;
use PHPStan\Type\NullType;
use PHPStan\Type\ObjectType;
use PHPStan\Type\StringType;
use PHPStan\Type\UnionType;
use PHPStan\Type\VerbosityLevel;
class TypeSpecifierTest extends \PHPStan\Testing\TestCase
{
    private const FALSEY_TYPE_DESCRIPTION = '0|0.0|\'\'|\'0\'|array()|false|null';
    private const TRUTHY_TYPE_DESCRIPTION = 'mixed~' . self::FALSEY_TYPE_DESCRIPTION;
    private const SURE_NOT_FALSEY = '~' . self::FALSEY_TYPE_DESCRIPTION;
    private const SURE_NOT_TRUTHY = '~' . self::TRUTHY_TYPE_DESCRIPTION;
    /** @var \PhpParser\PrettyPrinter\Standard() */
    private $printer;
    /** @var \PHPStan\Analyser\TypeSpecifier */
    private $typeSpecifier;
    /** @var Scope */
    private $scope;
    protected function setUp() : void
    {
        $broker = $this->createBroker();
        $this->printer = new \PhpParser\PrettyPrinter\Standard();
        $this->typeSpecifier = $this->createTypeSpecifier($this->printer, $broker);
        $this->scope = $this->createScopeFactory($broker, $this->typeSpecifier)->create(\PHPStan\Analyser\ScopeContext::create(''));
        $this->scope = $this->scope->enterClass($broker->getClass('DateTime'));
        $this->scope = $this->scope->assignVariable('bar', new \PHPStan\Type\ObjectType('Bar'));
        $this->scope = $this->scope->assignVariable('stringOrNull', new \PHPStan\Type\UnionType([new \PHPStan\Type\StringType(), new \PHPStan\Type\NullType()]));
        $this->scope = $this->scope->assignVariable('string', new \PHPStan\Type\StringType());
        $this->scope = $this->scope->assignVariable('barOrNull', new \PHPStan\Type\UnionType([new \PHPStan\Type\ObjectType('Bar'), new \PHPStan\Type\NullType()]));
        $this->scope = $this->scope->assignVariable('barOrFalse', new \PHPStan\Type\UnionType([new \PHPStan\Type\ObjectType('Bar'), new \PHPStan\Type\Constant\ConstantBooleanType(\false)]));
        $this->scope = $this->scope->assignVariable('stringOrFalse', new \PHPStan\Type\UnionType([new \PHPStan\Type\StringType(), new \PHPStan\Type\Constant\ConstantBooleanType(\false)]));
        $this->scope = $this->scope->assignVariable('array', new \PHPStan\Type\ArrayType(new \PHPStan\Type\MixedType(), new \PHPStan\Type\MixedType()));
        $this->scope = $this->scope->assignVariable('foo', new \PHPStan\Type\MixedType());
    }
    /**
     * @dataProvider dataCondition
     * @param Expr  $expr
     * @param mixed[] $expectedPositiveResult
     * @param mixed[] $expectedNegatedResult
     */
    public function testCondition(\PhpParser\Node\Expr $expr, array $expectedPositiveResult, array $expectedNegatedResult) : void
    {
        $specifiedTypes = $this->typeSpecifier->specifyTypesInCondition($this->scope, $expr, \PHPStan\Analyser\TypeSpecifierContext::createTruthy());
        $actualResult = $this->toReadableResult($specifiedTypes);
        $this->assertSame($expectedPositiveResult, $actualResult, \sprintf('if (%s)', $this->printer->prettyPrintExpr($expr)));
        $specifiedTypes = $this->typeSpecifier->specifyTypesInCondition($this->scope, $expr, \PHPStan\Analyser\TypeSpecifierContext::createFalsey());
        $actualResult = $this->toReadableResult($specifiedTypes);
        $this->assertSame($expectedNegatedResult, $actualResult, \sprintf('if not (%s)', $this->printer->prettyPrintExpr($expr)));
    }
    public function dataCondition() : array
    {
        return [[$this->createFunctionCall('is_int'), ['$foo' => 'int'], ['$foo' => '~int']], [$this->createFunctionCall('is_numeric'), ['$foo' => 'float|int|(string&numeric)'], ['$foo' => '~float|int']], [$this->createFunctionCall('is_scalar'), ['$foo' => 'bool|float|int|string'], ['$foo' => '~bool|float|int|string']], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd($this->createFunctionCall('is_int'), $this->createFunctionCall('random')), ['$foo' => 'int'], []], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr($this->createFunctionCall('is_int'), $this->createFunctionCall('random')), [], ['$foo' => '~int']], [new \PhpParser\Node\Expr\BinaryOp\LogicalAnd($this->createFunctionCall('is_int'), $this->createFunctionCall('random')), ['$foo' => 'int'], []], [new \PhpParser\Node\Expr\BinaryOp\LogicalOr($this->createFunctionCall('is_int'), $this->createFunctionCall('random')), [], ['$foo' => '~int']], [new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_int')), ['$foo' => '~int'], ['$foo' => 'int']], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_int')), $this->createFunctionCall('random')), ['$foo' => '~int'], []], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_int')), $this->createFunctionCall('random')), [], ['$foo' => 'int']], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_int'))), ['$foo' => 'int'], ['$foo' => '~int']], [$this->createInstanceOf('Foo'), ['$foo' => 'Foo'], ['$foo' => '~Foo']], [new \PhpParser\Node\Expr\BooleanNot($this->createInstanceOf('Foo')), ['$foo' => '~Foo'], ['$foo' => 'Foo']], [new \PhpParser\Node\Expr\Instanceof_(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('className')), ['$foo' => 'object'], []], [new \PhpParser\Node\Expr\BinaryOp\Equal(new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('get_class'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo'))]), new \PhpParser\Node\Scalar\String_('Foo')), ['$foo' => 'Foo'], ['$foo' => '~Foo']], [new \PhpParser\Node\Expr\BinaryOp\Equal(new \PhpParser\Node\Scalar\String_('Foo'), new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('get_class'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo'))])), ['$foo' => 'Foo'], ['$foo' => '~Foo']], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\Instanceof_(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('className'))), [], ['$foo' => 'object']], [new \PhpParser\Node\Expr\Variable('foo'), ['$foo' => self::SURE_NOT_FALSEY], ['$foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\Variable('foo'), $this->createFunctionCall('random')), ['$foo' => self::SURE_NOT_FALSEY], []], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\Variable('foo'), $this->createFunctionCall('random')), [], ['$foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\Variable('bar')), ['$bar' => self::SURE_NOT_TRUTHY], ['$bar' => self::SURE_NOT_FALSEY]], [new \PhpParser\Node\Expr\PropertyFetch(new \PhpParser\Node\Expr\Variable('this'), 'foo'), ['$this->foo' => self::SURE_NOT_FALSEY], ['$this->foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\PropertyFetch(new \PhpParser\Node\Expr\Variable('this'), 'foo'), $this->createFunctionCall('random')), ['$this->foo' => self::SURE_NOT_FALSEY], []], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\PropertyFetch(new \PhpParser\Node\Expr\Variable('this'), 'foo'), $this->createFunctionCall('random')), [], ['$this->foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\PropertyFetch(new \PhpParser\Node\Expr\Variable('this'), 'foo')), ['$this->foo' => self::SURE_NOT_TRUTHY], ['$this->foo' => self::SURE_NOT_FALSEY]], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr($this->createFunctionCall('is_int'), $this->createFunctionCall('is_string')), ['$foo' => 'int|string'], ['$foo' => '~int|string']], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr($this->createFunctionCall('is_int'), new \PhpParser\Node\Expr\BinaryOp\BooleanOr($this->createFunctionCall('is_string'), $this->createFunctionCall('is_bool'))), ['$foo' => 'bool|int|string'], ['$foo' => '~bool|int|string']], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr($this->createFunctionCall('is_int', 'foo'), $this->createFunctionCall('is_string', 'bar')), [], ['$foo' => '~int', '$bar' => '~string']], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\BinaryOp\BooleanOr($this->createFunctionCall('is_int', 'foo'), $this->createFunctionCall('is_string', 'foo')), $this->createFunctionCall('random')), ['$foo' => 'int|string'], []], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\BinaryOp\BooleanAnd($this->createFunctionCall('is_int', 'foo'), $this->createFunctionCall('is_string', 'foo')), $this->createFunctionCall('random')), [], ['$foo' => '~*NEVER*']], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\BinaryOp\BooleanAnd($this->createFunctionCall('is_int', 'foo'), $this->createFunctionCall('is_string', 'bar')), $this->createFunctionCall('random')), [], []], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_int', 'foo')), new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_string', 'foo'))), $this->createFunctionCall('random')), [], ['$foo' => 'int|string']], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_int', 'foo')), new \PhpParser\Node\Expr\BooleanNot($this->createFunctionCall('is_string', 'foo'))), $this->createFunctionCall('random')), ['$foo' => '~*NEVER*'], []], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('true'))), ['$foo' => 'true & ~' . self::FALSEY_TYPE_DESCRIPTION], ['$foo' => '~true']], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$foo' => 'false & ~' . self::TRUTHY_TYPE_DESCRIPTION], ['$foo' => '~false']], [new \PhpParser\Node\Expr\BinaryOp\Identical($this->createFunctionCall('is_int'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('true'))), ['is_int($foo)' => 'true', '$foo' => 'int'], ['is_int($foo)' => '~true', '$foo' => '~int']], [new \PhpParser\Node\Expr\BinaryOp\Identical($this->createFunctionCall('is_int'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['is_int($foo)' => 'false', '$foo' => '~int'], ['$foo' => 'int', 'is_int($foo)' => '~false']], [new \PhpParser\Node\Expr\BinaryOp\Equal($this->createFunctionCall('is_int'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('true'))), ['$foo' => 'int'], ['$foo' => '~int']], [new \PhpParser\Node\Expr\BinaryOp\Equal($this->createFunctionCall('is_int'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$foo' => '~int'], ['$foo' => 'int']], [new \PhpParser\Node\Expr\BinaryOp\Equal(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$foo' => self::SURE_NOT_TRUTHY], ['$foo' => self::SURE_NOT_FALSEY]], [new \PhpParser\Node\Expr\BinaryOp\Equal(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('null'))), ['$foo' => self::SURE_NOT_TRUTHY], ['$foo' => self::SURE_NOT_FALSEY]], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('bar')), ['$foo' => 'Bar', '$bar' => 'Bar'], []], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('Foo'))]), ['$foo' => 'Foo'], ['$foo' => '~Foo']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('className'))]), ['$foo' => 'object'], []], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\ClassConstFetch(new \PhpParser\Node\Name('static'), 'class'))]), ['$foo' => 'static(DateTime)'], ['$foo' => '~static(DateTime)']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('Foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('true')))]), ['$foo' => 'Foo|string'], ['$foo' => '~Foo']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('className')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('true')))]), ['$foo' => 'object|string'], []], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('Foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('unknown'))]), ['$foo' => 'Foo|string'], ['$foo' => '~Foo']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_a'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('className')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('unknown'))]), ['$foo' => 'object|string'], []], [new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('stringOrNull')), ['$foo' => self::SURE_NOT_FALSEY], ['$foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('stringOrFalse')), ['$foo' => self::SURE_NOT_FALSEY], ['$foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('bar')), ['$foo' => self::SURE_NOT_FALSEY], ['$foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\Isset_([new \PhpParser\Node\Expr\Variable('stringOrNull'), new \PhpParser\Node\Expr\Variable('barOrNull')]), ['$stringOrNull' => '~null', '$barOrNull' => '~null'], ['isset($stringOrNull, $barOrNull)' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\Empty_(new \PhpParser\Node\Expr\Variable('stringOrNull'))), ['$stringOrNull' => '~false|null'], ['empty($stringOrNull)' => self::SURE_NOT_FALSEY]], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Scalar\LNumber(123)), ['$foo' => '123', 123 => '123'], ['$foo' => '~123']], [new \PhpParser\Node\Expr\Empty_(new \PhpParser\Node\Expr\Variable('array')), ['$array' => '~nonEmpty'], ['$array' => 'nonEmpty & ~false|null']], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\Empty_(new \PhpParser\Node\Expr\Variable('array'))), ['$array' => 'nonEmpty & ~false|null'], ['$array' => '~nonEmpty']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('count'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))]), ['$array' => 'nonEmpty'], ['$array' => '~nonEmpty']], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('count'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))])), ['$array' => '~nonEmpty'], ['$array' => 'nonEmpty']], [new \PhpParser\Node\Expr\Variable('foo'), ['$foo' => self::SURE_NOT_FALSEY], ['$foo' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\Variable('array'), ['$array' => self::SURE_NOT_FALSEY], ['$array' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BinaryOp\Equal(new \PhpParser\Node\Expr\Instanceof_(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('className')), new \PhpParser\Node\Scalar\LNumber(1)), ['$foo' => 'object'], []], [new \PhpParser\Node\Expr\BinaryOp\Equal(new \PhpParser\Node\Expr\Instanceof_(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Expr\Variable('className')), new \PhpParser\Node\Scalar\LNumber(0)), [], ['$foo' => 'object']], [new \PhpParser\Node\Expr\Isset_([new \PhpParser\Node\Expr\PropertyFetch(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Identifier('bar'))]), ['$foo' => 'object&hasProperty(bar) & ~null', '$foo->bar' => '~null'], ['isset($foo->bar)' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\Isset_([new \PhpParser\Node\Expr\StaticPropertyFetch(new \PhpParser\Node\Name('Foo'), new \PhpParser\Node\VarLikeIdentifier('bar'))]), ['Foo::$bar' => '~null'], ['isset(Foo::$bar)' => self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Variable('barOrNull'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('null'))), ['$barOrNull' => 'null'], ['$barOrNull' => '~null']], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('notNullBar'), new \PhpParser\Node\Expr\Variable('barOrNull')), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('null'))), ['$notNullBar' => 'null'], ['$notNullBar' => '~null']], [new \PhpParser\Node\Expr\BinaryOp\NotIdentical(new \PhpParser\Node\Expr\Variable('barOrNull'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('null'))), ['$barOrNull' => '~null'], ['$barOrNull' => 'null']], [new \PhpParser\Node\Expr\BinaryOp\Smaller(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(3)), ['$n' => '~int<3, max>'], ['$n' => '~int<min, 2>']], [
            new \PhpParser\Node\Expr\BinaryOp\Smaller(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(\PHP_INT_MIN)),
            [],
            // would be nice to specify that $n cannot be an int
            [],
        ], [
            new \PhpParser\Node\Expr\BinaryOp\Greater(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(\PHP_INT_MAX)),
            [],
            // would be nice to specify that $n cannot be an int
            [],
        ], [new \PhpParser\Node\Expr\BinaryOp\SmallerOrEqual(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(\PHP_INT_MIN)), ['$n' => '~int<' . (\PHP_INT_MIN + 1) . ', max>'], ['$n' => '~' . \PHP_INT_MIN]], [new \PhpParser\Node\Expr\BinaryOp\GreaterOrEqual(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(\PHP_INT_MAX)), ['$n' => '~int<min, ' . (\PHP_INT_MAX - 1) . '>'], ['$n' => '~' . \PHP_INT_MAX]], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\BinaryOp\GreaterOrEqual(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(3)), new \PhpParser\Node\Expr\BinaryOp\SmallerOrEqual(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(5))), ['$n' => '~int<min, 2>|int<6, max>'], ['$n' => '~int<3, 5>']], [new \PhpParser\Node\Expr\BinaryOp\BooleanAnd(new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('foo'), new \PhpParser\Node\Scalar\LNumber(1)), new \PhpParser\Node\Expr\BinaryOp\SmallerOrEqual(new \PhpParser\Node\Expr\Variable('n'), new \PhpParser\Node\Scalar\LNumber(5))), ['$foo' => self::SURE_NOT_FALSEY, '$n' => '~int<6, max>'], []], [new \PhpParser\Node\Expr\BinaryOp\NotIdentical(new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('notNullBar'), new \PhpParser\Node\Expr\Variable('barOrNull')), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('null'))), ['$notNullBar' => '~null'], ['$notNullBar' => 'null']], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Variable('barOrFalse'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$barOrFalse' => 'false & ' . self::SURE_NOT_TRUTHY], ['$barOrFalse' => '~false']], [new \PhpParser\Node\Expr\BinaryOp\Identical(new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('notFalseBar'), new \PhpParser\Node\Expr\Variable('barOrFalse')), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$notFalseBar' => 'false & ' . self::SURE_NOT_TRUTHY], ['$notFalseBar' => '~false']], [new \PhpParser\Node\Expr\BinaryOp\NotIdentical(new \PhpParser\Node\Expr\Variable('barOrFalse'), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$barOrFalse' => '~false'], ['$barOrFalse' => 'false & ' . self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\BinaryOp\NotIdentical(new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('notFalseBar'), new \PhpParser\Node\Expr\Variable('barOrFalse')), new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false'))), ['$notFalseBar' => '~false'], ['$notFalseBar' => 'false & ' . self::SURE_NOT_TRUTHY]], [new \PhpParser\Node\Expr\Instanceof_(new \PhpParser\Node\Expr\Assign(new \PhpParser\Node\Expr\Variable('notFalseBar'), new \PhpParser\Node\Expr\Variable('barOrFalse')), new \PhpParser\Node\Name('Bar')), ['$notFalseBar' => 'Bar'], ['$notFalseBar' => '~Bar']], [new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('array_key_exists'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))]), new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('array_key_exists'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('bar')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))])), ['$array' => 'array'], ['$array' => '~hasOffset(\'bar\')|hasOffset(\'foo\')']], [new \PhpParser\Node\Expr\BooleanNot(new \PhpParser\Node\Expr\BinaryOp\BooleanOr(new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('array_key_exists'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))]), new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('array_key_exists'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('bar')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))]))), ['$array' => '~hasOffset(\'bar\')|hasOffset(\'foo\')'], ['$array' => 'array']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('array_key_exists'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Scalar\String_('foo')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('array'))]), ['$array' => 'array&hasOffset(\'foo\')'], ['$array' => '~hasOffset(\'foo\')']], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_subclass_of'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('string')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('stringOrNull'))]), ['$string' => 'class-string|object'], []], [new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name('is_subclass_of'), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('string')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable('stringOrNull')), new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\ConstFetch(new \PhpParser\Node\Name('false')))]), ['$string' => 'object'], []]];
    }
    /**
     * @param \PHPStan\Analyser\SpecifiedTypes $specifiedTypes
     * @return mixed[]
     */
    private function toReadableResult(\PHPStan\Analyser\SpecifiedTypes $specifiedTypes) : array
    {
        $typesDescription = [];
        foreach ($specifiedTypes->getSureTypes() as $exprString => [$exprNode, $exprType]) {
            $typesDescription[$exprString][] = $exprType->describe(\PHPStan\Type\VerbosityLevel::precise());
        }
        foreach ($specifiedTypes->getSureNotTypes() as $exprString => [$exprNode, $exprType]) {
            $typesDescription[$exprString][] = '~' . $exprType->describe(\PHPStan\Type\VerbosityLevel::precise());
        }
        $descriptions = [];
        foreach ($typesDescription as $exprString => $exprTypes) {
            $descriptions[$exprString] = \implode(' & ', $exprTypes);
        }
        return $descriptions;
    }
    private function createInstanceOf(string $className, string $variableName = 'foo') : \PhpParser\Node\Expr\Instanceof_
    {
        return new \PhpParser\Node\Expr\Instanceof_(new \PhpParser\Node\Expr\Variable($variableName), new \PhpParser\Node\Name($className));
    }
    private function createFunctionCall(string $functionName, string $variableName = 'foo') : \PhpParser\Node\Expr\FuncCall
    {
        return new \PhpParser\Node\Expr\FuncCall(new \PhpParser\Node\Name($functionName), [new \PhpParser\Node\Arg(new \PhpParser\Node\Expr\Variable($variableName))]);
    }
}
