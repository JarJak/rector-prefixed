<?php

declare (strict_types=1);
namespace PHPStan\Type;

use PHPStan\TrinaryLogic;
use PHPStan\Type\Constant\ConstantIntegerType;
class MixedTypeTest extends \PHPStan\Testing\TestCase
{
    public function dataIsSuperTypeOf() : array
    {
        return [0 => [new \PHPStan\Type\MixedType(), new \PHPStan\Type\MixedType(), \PHPStan\TrinaryLogic::createYes()], 1 => [new \PHPStan\Type\MixedType(), new \PHPStan\Type\IntegerType(), \PHPStan\TrinaryLogic::createYes()], 2 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\IntegerType()), new \PHPStan\Type\IntegerType(), \PHPStan\TrinaryLogic::createNo()], 3 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\IntegerType()), new \PHPStan\Type\Constant\ConstantIntegerType(1), \PHPStan\TrinaryLogic::createNo()], 4 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), new \PHPStan\Type\IntegerType(), \PHPStan\TrinaryLogic::createMaybe()], 5 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), new \PHPStan\Type\MixedType(), \PHPStan\TrinaryLogic::createMaybe()], 6 => [new \PHPStan\Type\MixedType(), new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), \PHPStan\TrinaryLogic::createYes()], 7 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), \PHPStan\TrinaryLogic::createYes()], 8 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\IntegerType()), new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), \PHPStan\TrinaryLogic::createMaybe()], 9 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\Constant\ConstantIntegerType(1)), new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\IntegerType()), \PHPStan\TrinaryLogic::createYes()], 10 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\StringType()), new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\IntegerType()), \PHPStan\TrinaryLogic::createMaybe()], 11 => [new \PHPStan\Type\MixedType(), new \PHPStan\Type\ObjectWithoutClassType(), \PHPStan\TrinaryLogic::createYes()], 12 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectWithoutClassType()), new \PHPStan\Type\ObjectWithoutClassType(), \PHPStan\TrinaryLogic::createNo()], 13 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\ObjectWithoutClassType(), \PHPStan\TrinaryLogic::createMaybe()], 14 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\ObjectWithoutClassType(new \PHPStan\Type\ObjectType('Exception')), \PHPStan\TrinaryLogic::createYes()], 15 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\ObjectWithoutClassType(new \PHPStan\Type\ObjectType('InvalidArgumentException')), \PHPStan\TrinaryLogic::createMaybe()], 16 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('InvalidArgumentException')), new \PHPStan\Type\ObjectWithoutClassType(new \PHPStan\Type\ObjectType('Exception')), \PHPStan\TrinaryLogic::createYes()], 17 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\ObjectType('Exception'), \PHPStan\TrinaryLogic::createNo()], 18 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('InvalidArgumentException')), new \PHPStan\Type\ObjectType('Exception'), \PHPStan\TrinaryLogic::createMaybe()], 19 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\ObjectType('InvalidArgumentException'), \PHPStan\TrinaryLogic::createNo()], 20 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\MixedType(), \PHPStan\TrinaryLogic::createMaybe()], 21 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('Exception')), new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\ObjectType('stdClass')), \PHPStan\TrinaryLogic::createMaybe()], 22 => [new \PHPStan\Type\MixedType(), new \PHPStan\Type\NeverType(), \PHPStan\TrinaryLogic::createYes()], 23 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\NullType()), new \PHPStan\Type\NeverType(), \PHPStan\TrinaryLogic::createYes()], 24 => [new \PHPStan\Type\MixedType(), new \PHPStan\Type\UnionType([new \PHPStan\Type\StringType(), new \PHPStan\Type\IntegerType()]), \PHPStan\TrinaryLogic::createYes()], 25 => [new \PHPStan\Type\MixedType(\false, new \PHPStan\Type\NullType()), new \PHPStan\Type\UnionType([new \PHPStan\Type\StringType(), new \PHPStan\Type\IntegerType()]), \PHPStan\TrinaryLogic::createYes()]];
    }
    /**
     * @dataProvider dataIsSuperTypeOf
     * @param \PHPStan\Type\MixedType $type
     * @param Type $otherType
     * @param TrinaryLogic $expectedResult
     */
    public function testIsSuperTypeOf(\PHPStan\Type\MixedType $type, \PHPStan\Type\Type $otherType, \PHPStan\TrinaryLogic $expectedResult) : void
    {
        $actualResult = $type->isSuperTypeOf($otherType);
        $this->assertSame($expectedResult->describe(), $actualResult->describe(), \sprintf('%s -> isSuperTypeOf(%s)', $type->describe(\PHPStan\Type\VerbosityLevel::precise()), $otherType->describe(\PHPStan\Type\VerbosityLevel::precise())));
    }
}
